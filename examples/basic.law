ar uniq : Int =
  {}

ar absurd : Int =
  []

ar isEven : Int =
  ( , .2 ) divRem
  { div = .div, zeroRemainder = .rem ( , .0, eq ) }
  @zeroRemainder
  [ true = .div, false = "Was not even" error absurd ]

ar map : Int =
  { f = .1, xs = .2 }
  @xs
  [ empty = uniq empty.,
    cons = { head = ( .f, .xs .head ) app,
             tail = ( .f, .xs .tail ) map }
           cons. ]

ar length : Int =
  [ empty = 0, cons = ( 1, .tail length ) plus ]

ar mapLength : Int =
  (const(length), ) map

ar cons1 : Int =
  { head = 100, tail = } cons.

ar cons2 : Int =
  { head = 200, tail = } cons.

ar list3 : Int =
  empty. cons1 cons2 cons1

ar list2 : Int =
  empty. cons2 cons1 cons1 cons1

ar listOfLists : Int =
  empty. {head = list3, tail = } cons. {head = list2, tail = } cons.

ar mapLength : Int =
  ( const(length),  ) map

ar main : Int =
  listOfLists mapLength
