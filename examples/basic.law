ob Bool =
  [ true:  {},
    false: {} ]

ar Bool ---not--> Bool =
  [ true = {} false.,
    false = {} true. ]

// ar (Bool, Bool) ---and--> Bool =
//   @1 [ true = .2,
//        false = {} false. ]

// ob ListInt =
//   [ empty: {},
//     cons:  { head: Int, tail: ListInt }
//   ]

// ar ListInt ---length--> Int =
//   [ empty = 0,
//     cons = ( 1, .tail length ) plus ]

ar {} ---main--> {}  = false. not // list3 length


// Some lists follow

// ar List ---cons1--> List =
//   { head = 100, tail = } cons.

// ar List ---cons2--> List =
//   { head = 200, tail = } cons.

// ar {} ---list3--> List =
//   empty. cons1 cons2 cons1

// ar {} ---list2--> List =
//   empty. cons2 cons1 cons1 cons1
