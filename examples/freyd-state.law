sketch IntState over Base = {
  ar get : {:} --> Int,
  ar put : Int --> {:}
}

ar Base[IntState] next : {:} --> Int =
  get
  <{ current= , next= }>
  !next{ <incr> put }
  <.current>

interp IntState pureState =
  over
    { state : Int, value : }
  handling
    { ar get  |->  {state = .state, value = .state},
      ar put  |->  {state = .value, value = {=}}
    }
  summing
    @value
  side
    { eff = { state = .state,
              value = .value .eff }
            eff,
      pur = .value
    }
    { state = .eff .state,
      value = { pur = .pur .pur,
                eff = .eff .value }
    }

// make a function which maps `next` over a list of units:

ar Base[IntState] mapNext : list({:}) --> list(Int) =
    [ empty = <empty.>,
      cons  = !head{ next } !tail{ mapNext } <cons.> ]

// apply it:

ar Base main : {:} --> Int =
  { state = 0, value = }           // set the initial state to 0
  pureState(<exampleList> mapNext) // use the freyd arrow `counting` interpreting it with `pureState` functor
  .value                           // we are jut interesting in the result, not the accumulated state


////////////////
// list stuff //
////////////////

// This is just defining the `list` functor and then defining an example list.

ar Cat list : Base --> Base =
  [ empty : {:},
    cons  : { head : ,
              tail : list } ]

ar Base bump : list({:}) --> list({:}) =
  { head = {=}, tail = } cons.

ar Base exampleList : {:} --> list({:}) =
  empty. bump bump bump
