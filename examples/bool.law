ob Bool = [ true : {}, false: {} ]

ar (Bool, Bool) ---and--> Bool =
  f : x -> (Bool, Bool)

  f .1 : x -> Bool 
  f .2 : x -> Bool



  g : t -> Bool


Bool -> Bool
Bool -> Bool

Bool -> Bool


Consider the category of directed graphs


{} is the terminal graph (one point, one directed loop)

Bool is the coproduct of this with itself

G -> Bool

means that G partitions into two graphs G_true and G_false, with no arrows going from one partition to the othe

so now

f : G -> Bool
g : G -> Bool

is a graph with two different partions


       true    false
       .  .  |  .  .
true   .  .  |  .  .
       _____________

false  .  .  |  .  .
       .  .  |  .  .


this creates 4 partitions, but crucially arrows can go from one to the other.


fg : G -> Bool

- can be defined on points easily enough
- how to define on arrows? those which begin and end in a single partition are ok



category ReflGraph
  ob Point
  ob Arrow
  ar Point ---source--> Arrow
  ar Point ---target--> Arrow
  ar Arrow ---spec--> Point
  eq ...


in Graph, {} = graph with a single dot and a single arrow

! : Point --> {}
! : Arrow --> {}


(Ar, Ar) -> Ar

f : Ar -> (Ar, Ar)

f1 : Ar -> Ar
f2 : Ar -> Ar






  

def ar in Graph : (Bool, Bool) ---and--> Bool =
  by generators

  Point:
    given f : Point --> (Bool, Bool)


    f .1 : Point --> Bool
    f .2 : Point --> Bool

    cases f .1
      ! true. ->
      ! false.
    cases f .2
      ! true.
      ! false.


length : List a --> Int =

Pt -> List a



1 + Ar * (1 + Ar * (1 + Ar * (1 + ...)))

=

1 + Ar * 1 + Ar * Ar * 1 + Ar * Ar * Ar * 1 + ...


Ar * Ar * Ar






  target : Ar -> Bool



Point --> Bool

.true  : {} --> Bool
.false : {} --> Bool

concat



and : (Bool, Bool) -> Bool

yoneda f {

  f : X -> (Bool, Bool)

  f1 : X -> Bool = f .1
  f2 : X -> Bool = f .2

  genrators X {
    Elem :
      f .1 : Elem -> [true : {}, false: {}]
      case f .1
        { true: f .1 : Elem -> {}
          case f .2
             { true: ! true
             , false: ! false
             }
        ,
          false: f .1 : Elem -> {}
        }
  }




  X -> Bool

}  


f    : X -> (Bool, Bool)
f .1 : X -> Bool
f .2 : X -> Bool

and : (Bool, Bool)  ->  Bool =
  yoneda f {
    *: case f .1 {
         true: case f .2 {
           true: ! true,
           false: ! false
         },
         false: ! false
       } 
  }

case:
- check that the source is a generator
- check that the target is a colim
- then since colimits are pointwise, can assume it lands wholy in one case

object List a =
  colim{
    empty: {}
    cons:  {head: a, tail: List a}
  }

object Foo =
  [ a: A,
    b: B,
    c: C,
    c->a: ff
    c->b: gg ]
  

map : (a => b, List(a) ) -> List(b) =
{ x |->                 // x : T -> (a => b, List(a) )
  let f = x .1          // xs : T -> List(b)
      xs = x .2
  in  xs factors {
        _    empty = ! 0,
        cell cons  = { head = (f, xs head) app,
                       tail = (f, xs tail) map
                     } cons
      }
}



length : List(a) -> Int =

xs |-> {
  xs factors {
    _    empty. = ! 0, 
    cell cons.  = (cell .tail length, ! 1) plus
  }
}


So what is `factor_through`?


takes an arrow T -> CoLim(...) and will assume that T is a generator, and therefore
allow casing by postcomposition


* -> List(a)

* -> {head: a, tail: List(a)} --cons--> List(a)


* -> Int


A -> B
A -> C

A -> (B,C)

f : A -> B
g : A -> C

(f,g) : A -> (B,C)

(B,C) -> B
(B,C) -> C


Int -> [String, Int]


(Bool, Bool) -> Bool
