PureState = #{ state: Const(Int), val : Id }


ar Cat PureState : Base[StateInt] -> Base =
  free_extension{
    X   |->  {state: Int, val: X}
    f   |->  {state: .state, val: .val f},
    get |->  {state: .state, val: .state}
    put |->  {state: .val, val: !}

  }

ar Cat PureState : Base[StateInt] -> Base =
  free_extension{
    X   |->  {state: Int, val: X}
    f   |->  {state: .state, val: .val f},
    get |->  {state: .state, val: .state}
    put |->  {state: .val, val: !}

  }


//


-- Another way of doing it, if you already know what the extended category is,
-- is to just define it directly:

category WithInt

  ob = WithInt(Base)   -- this is like a haskell `data` but at
                       -- the next level i.e. it says "I have
                       -- an object Int_Base(X) of IntBase for
                       -- all objects X of Base"

  ar
    WithInt(X) -> WithInt(Y) =
      WithInt({state: Int, val: X} -> {state: Int, val: Y})
      -- this says that I can construct a morphism of WithInt with the given one from Base

  id = ...

  comp = ...



-- note also the functor:

functor Unstateful : Base -> WithInt
  ob  : X  |->  WithInt(X)
  mor : f  |->  WithInt({state: .state, val: .val f})


-- Then we can give an interpretation of StateInt in WithInt:

functor StateWithInt : Base[StateInt] -> WithInt

  ob : X  |->  WithInt(X)

  ar : (In(f) : X -> Y)   |->  Unstateful(f)

       (get : {} -> Int)  |->  WithInt({state: .state, val: .state})
       (put : Int -> {})  |->  WithInt({state: .val, val: !})
