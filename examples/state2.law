sketch IntState {
  get : {:} --> Int,
  put : Int --> {:}
}

j : Base --> Base[State]
act : (Base, Base[State]) --> Base[State]

ar Base[State]  next : {:} --> Int =
  get
  { current = , next = j(inc) }
  

ar Base[State]  next : {:} --> Int =
  get
  i( , inc)
  carry( , put)
  .1

// get { <inc> put | current: } .current


// Mapping statefully over a list

ar Cat list : Base --> Base =
  [ empty : {:},
    cons  : { head : ,
              tail : list } ]


mapState : Base[State] --> Base[State] =

  f : a --> b

  mapState(f) : i(list(a)) --> i(list(b))


  [ empty : empty.,
    cons  : { | } {head: _, tail: _} cons.
  ]

i(list(a))
  = i([empty: {:}, cons: {head: a, tail: list(a)}])
  = [empty: i({:}), cons: i({head: a, tail: list(a)})]

